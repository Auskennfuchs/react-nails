{"version":3,"sources":["webpack:///../docz/Layout/Grid/GridRow.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","columns","Row","Column","backgroundColor","space","stretch","__position","__code","__scope","Playground","times","Button","Inline","Grid","Box","Types","ThemeProps","HeaderText","Filler","isMDXComponent"],"mappings":"uhBASO,IAAMA,EAAe,Q,8MAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,iBAAQ,CACN,GAAM,WADR,YAGA,gNACA,iBAAQ,CACN,GAAM,WADR,WAGA,YAAC,IAAD,CAAMC,QAAS,EAAGD,QAAQ,QAC1B,YAAC,IAAKE,IAAN,KACI,YAAC,IAAKC,OAAN,KACI,YAAC,IAAD,CAAQH,QAAQ,UACZ,YAAC,IAAD,CAAKI,gBAAgB,gBAAgBC,MAAM,SAASL,QAAQ,OAA5D,QAGA,YAAC,IAAD,CAAQA,QAAQ,UACZ,YAAC,IAAD,CAAKI,gBAAgB,WAAWC,MAAM,SAASC,SAAO,EAACN,QAAQ,OAA/D,MAEI,uBAFJ,yBAQZ,YAAC,IAAKG,OAAN,KACI,YAAC,IAAD,CAAKC,gBAAgB,YAAYC,MAAM,SAASL,QAAQ,OAAxD,OAEI,uBAFJ,qBAII,uBAJJ,qBAMI,uBANJ,uBAUJ,YAAC,IAAKG,OAAN,KACI,YAAC,IAAD,CAAKC,gBAAgB,gBAAgBC,MAAM,SAASL,QAAQ,OAA5D,kBAIJ,YAAC,IAAKG,OAAN,KACI,YAAC,IAAD,CAAKC,gBAAgB,WAAWC,MAAM,SAASL,QAAQ,OAAvD,oBAMR,iBAAQ,CACN,GAAM,cADR,cAGA,iBAAQ,CACN,GAAM,0BADR,0BAGA,+LACA,iBAAQ,CACN,GAAM,cADR,cAGA,YAAC,IAAD,CAAYO,WAAY,EAAGC,OAAQ,qIAAsIC,QAAS,CAChLV,QACAH,kBACAc,eACAC,cACAC,WACAC,WACAC,SACAC,QACAC,UACAC,eACAC,eACAf,WACAgB,YACCnB,QAAQ,cACX,YAAC,IAAD,CAAMC,QAAS,EAAGD,QAAQ,QACtB,YAAC,IAAKE,IAAN,KACI,YAAC,IAAKC,OAAN,aACA,YAAC,IAAKA,OAAN,iB,qMAQZN,EAAWuB,gBAAiB","file":"component---docz-layout-grid-grid-row-mdx-c5498f8973d441a8d05b.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"E:/Web/react-nails/react-nails-docz/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground } from 'docz';\nimport { times } from 'lodash';\nimport { Button, Inline, Grid, Box, Types, ThemeProps, HeaderText, Column, Filler } from 'react-nails';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"gridrow\"\n    }}>{`Grid.Row`}</h1>\n    <p>{`A Grid.Row element is a container for Grid.Column elements. A Grid.Row can contain more items than defined columns. In this case, the overlapping columns will get wrapped to next row.`}</p>\n    <h2 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h2>\n    <Grid columns={2} mdxType=\"Grid\">\n    <Grid.Row>\n        <Grid.Column>\n            <Column mdxType=\"Column\">\n                <Box backgroundColor=\"positiveLight\" space=\"medium\" mdxType=\"Box\">\n                    Col1\n                </Box>\n                <Filler mdxType=\"Filler\">\n                    <Box backgroundColor=\"positive\" space=\"medium\" stretch mdxType=\"Box\">\n                        Col\n                        <br />\n                        Second row of text\n                    </Box>\n                </Filler>\n            </Column>\n        </Grid.Column>\n        <Grid.Column>\n            <Box backgroundColor=\"infoLight\" space=\"medium\" mdxType=\"Box\">\n                Col2\n                <br />\n                Second row of text\n                <br />\n                Second row of text\n                <br />\n                Second row of text\n            </Box>\n        </Grid.Column>\n        <Grid.Column>\n            <Box backgroundColor=\"negativeLight\" space=\"medium\" mdxType=\"Box\">\n                Col3 next row\n            </Box>\n        </Grid.Column>\n        <Grid.Column>\n            <Box backgroundColor=\"negative\" space=\"medium\" mdxType=\"Box\">\n                Col4 next row\n            </Box>\n        </Grid.Column>\n    </Grid.Row>\n    </Grid>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <h3 {...{\n      \"id\": \"equalheights---boolean\"\n    }}>{`equalHeights - boolean`}</h3>\n    <p>{`Sets all columns to the same size, even if they are wrapped to the next row. Without this options all columns in one visible row have the size of the heighest column.`}</p>\n    <h2 {...{\n      \"id\": \"playground\"\n    }}>{`Playground`}</h2>\n    <Playground __position={1} __code={'<Grid columns={2}>\\n  <Grid.Row>\\n    <Grid.Column>Col1</Grid.Column>\\n    <Grid.Column>Col2</Grid.Column>\\n  </Grid.Row>\\n</Grid>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      times,\n      Button,\n      Inline,\n      Grid,\n      Box,\n      Types,\n      ThemeProps,\n      HeaderText,\n      Column,\n      Filler\n    }} mdxType=\"Playground\">\n    <Grid columns={2} mdxType=\"Grid\">\n        <Grid.Row>\n            <Grid.Column>Col1</Grid.Column>\n            <Grid.Column>Col2</Grid.Column>\n        </Grid.Row>\n    </Grid>\n    </Playground>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}