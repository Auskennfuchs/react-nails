{"version":3,"sources":["webpack:///../docz/Layout/Grid/Grid.mdx"],"names":["SpacingType","Types","TextAlignType","SizeType","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","itemSpace","lineSpace","Row","Column","width","backgroundColor","space","Medium","stretch","times","idx","key","border","borderColor","textAlign","Center","Object","entries","map","name","theme","size","Small","spaces","columns","__position","__code","__scope","Playground","Button","Inline","Grid","Box","ThemeProps","HeaderText","isMDXComponent"],"mappings":"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","file":"component---docz-layout-grid-grid-mdx-ec917c554385a38749e5.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"D:/Web/react-nails/react-nails-docz/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground } from \"docz\";\nimport { times } from \"lodash\";\nimport { Button, Inline, Grid, Box, Types, ThemeProps, HeaderText } from \"react-nails\";\nconst {\n  SpacingType,\n  TextAlignType,\n  SizeType\n} = Types;\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"grid\"\n    }}>{`Grid`}</h1>\n    <p>{`A Grid is used to layout multiple elements in rows and columns. A Grid contains at least one Grid.Row element to define a row. With you can control the order of elements in different responsive settings.`}</p>\n    <h2 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h2>\n    <Grid itemSpace=\"medium\" lineSpace=\"medium\" mdxType=\"Grid\">\n    <Grid.Row>\n        <Grid.Column width=\"4\">\n            <Box backgroundColor=\"positiveLight\" space={SpacingType.Medium} mdxType=\"Box\">\n                Col1 width 4\n            </Box>\n        </Grid.Column>\n        <Grid.Column width=\"3\">\n            <Box backgroundColor=\"infoLight\" space={SpacingType.Medium} stretch mdxType=\"Box\">\n                Col2 width 3\n            </Box>\n        </Grid.Column>\n        <Grid.Column width=\"5\">\n            <Box backgroundColor=\"negativeLight\" space={SpacingType.Medium} stretch mdxType=\"Box\">\n                Col3 width 5\n            </Box>\n        </Grid.Column>\n    </Grid.Row>\n    <Grid.Row>\n        <Grid.Column width=\"4\">\n            <Box backgroundColor=\"positiveLight\" space={SpacingType.Medium} mdxType=\"Box\">\n                Col1 width 4\n            </Box>\n        </Grid.Column>\n        <Grid.Column width=\"3\">\n            <Box backgroundColor=\"infoLight\" space={SpacingType.Medium} stretch mdxType=\"Box\">\n                Col2 width 3\n            </Box>\n        </Grid.Column>\n        <Grid.Column width=\"5\">\n            <Box backgroundColor=\"negativeLight\" space={SpacingType.Medium} stretch mdxType=\"Box\">\n                Col3 width 5\n            </Box>\n        </Grid.Column>\n    </Grid.Row>\n    </Grid>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <h3 {...{\n      \"id\": \"columns---number\"\n    }}>{`columns - number`}</h3>\n    <p>{`Defines the number of columns. If not provided the default of 12 columns will be used.`}</p>\n    <Grid mdxType=\"Grid\">\n    <Grid.Row>\n        {times(12, idx => <Grid.Column key={idx}>\n                <Box key={idx} border=\"thin\" borderColor=\"black\" textAlign={TextAlignType.Center} mdxType=\"Box\">\n                    {idx}\n                </Box>\n            </Grid.Column>)}\n    </Grid.Row>\n    </Grid>\n    <h3 {...{\n      \"id\": \"itemspace---spacingtype\"\n    }}>{`itemSpace - SpacingType`}</h3>\n    <p>{`This property defines the horizontal space between 2 grid columns (horizonal gutter). The value can be set as single value or as responsive array.`}</p>\n    <Box mdxType=\"Box\">\n    {Object.entries(SpacingType).map(([name, space]) => <Box key={name} mdxType=\"Box\">\n            <ThemeProps mdxType=\"ThemeProps\">\n                {theme => <HeaderText size={SizeType.Small} mdxType=\"HeaderText\">\n                        {name} - {theme.spaces[space]}\n                    </HeaderText>}\n            </ThemeProps>\n            <Grid columns={3} itemSpace={space} mdxType=\"Grid\">\n                <Grid.Row>\n                    <Grid.Column>\n                        <Box backgroundColor=\"positiveLight\" space={SpacingType.Medium} mdxType=\"Box\">\n                            Column\n                        </Box>\n                    </Grid.Column>\n                    <Grid.Column>\n                        <Box backgroundColor=\"infoLight\" space={SpacingType.Medium} textAlign=\"center\" mdxType=\"Box\">\n                            Column\n                        </Box>\n                    </Grid.Column>\n                    <Grid.Column>\n                        <Box backgroundColor=\"negativeLight\" space={SpacingType.Medium} textAlign=\"right\" mdxType=\"Box\">\n                            Column\n                        </Box>\n                    </Grid.Column>\n                </Grid.Row>\n            </Grid>\n        </Box>)}\n    </Box>\n    <h3 {...{\n      \"id\": \"linespace---spacingtype\"\n    }}>{`lineSpace - SpacingType`}</h3>\n    <p>{`This property defines the vertical space between 2 grid rows (vertical gutter). The value can be set as single value or as responsive array`}</p>\n    <Box mdxType=\"Box\">\n    {Object.entries(SpacingType).map(([name, space]) => <Box mdxType=\"Box\">\n            <ThemeProps mdxType=\"ThemeProps\">\n                {theme => <HeaderText size={SizeType.Small} mdxType=\"HeaderText\">\n                        {name} - {theme.spaces[space]}\n                    </HeaderText>}\n            </ThemeProps>\n            <Grid columns={2} lineSpace={space} mdxType=\"Grid\">\n                <Grid.Row>\n                    <Grid.Column>\n                        <Box backgroundColor=\"positiveLight\" space={SpacingType.Medium} textAlign=\"center\" mdxType=\"Box\">\n                            Column\n                        </Box>\n                    </Grid.Column>\n                    <Grid.Column>\n                        <Box backgroundColor=\"infoLight\" space={SpacingType.Medium} textAlign=\"center\" mdxType=\"Box\">\n                            Column\n                        </Box>\n                    </Grid.Column>\n                    <Grid.Column>\n                        <Box backgroundColor=\"negativeLight\" space={SpacingType.Medium} textAlign=\"center\" mdxType=\"Box\">\n                            Column\n                        </Box>\n                    </Grid.Column>\n                    <Grid.Column>\n                        <Box backgroundColor=\"positiveLight\" space={SpacingType.Medium} textAlign=\"center\" mdxType=\"Box\">\n                            Column\n                        </Box>\n                    </Grid.Column>\n                </Grid.Row>\n            </Grid>\n        </Box>)}\n    </Box>\n    <h2 {...{\n      \"id\": \"playground\"\n    }}>{`Playground`}</h2>\n    <Playground __position={4} __code={'<Grid itemSpace=\\\"medium\\\" lineSpace=\\\"medium\\\">\\n  <Grid.Row>\\n    <Grid.Column width=\\\"4\\\">\\n      <Box backgroundColor=\\\"positiveLight\\\" space=\\\"medium\\\">\\n        Col1 width 4\\n      </Box>\\n    </Grid.Column>\\n    <Grid.Column width=\\\"3\\\">\\n      <Box backgroundColor=\\\"infoLight\\\" space=\\\"medium\\\" stretch>\\n        Col2 width 3\\n      </Box>\\n    </Grid.Column>\\n    <Grid.Column width=\\\"5\\\">\\n      <Box backgroundColor=\\\"negativeLight\\\" space=\\\"medium\\\" stretch>\\n        Col3 width 5\\n      </Box>\\n    </Grid.Column>\\n  </Grid.Row>\\n</Grid>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      times,\n      Button,\n      Inline,\n      Grid,\n      Box,\n      Types,\n      ThemeProps,\n      HeaderText\n    }} mdxType=\"Playground\">\n    <Grid itemSpace=\"medium\" lineSpace=\"medium\" mdxType=\"Grid\">\n        <Grid.Row>\n            <Grid.Column width=\"4\">\n                <Box backgroundColor=\"positiveLight\" space=\"medium\" mdxType=\"Box\">\n                    Col1 width 4\n                </Box>\n            </Grid.Column>\n            <Grid.Column width=\"3\">\n                <Box backgroundColor=\"infoLight\" space=\"medium\" stretch mdxType=\"Box\">\n                    Col2 width 3\n                </Box>\n            </Grid.Column>\n            <Grid.Column width=\"5\">\n                <Box backgroundColor=\"negativeLight\" space=\"medium\" stretch mdxType=\"Box\">\n                    Col3 width 5\n                </Box>\n            </Grid.Column>\n        </Grid.Row>\n    </Grid>\n    </Playground>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}