{"version":3,"sources":["webpack:///../docz/Theme/Colors.mdx"],"names":["ItemAlignType","Types","ColorBox","styled","NailsBox","attrs","flex","ColorField","p","backgroundColor","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","columns","itemSpace","lineSpace","Row","theme","Object","entries","colors","sort","a","b","localeCompare","map","col","value","Column","width","key","as","space","textColor","rounded","stretchChild","textWeight","align","Bottom","textAlign","block","palette","text","isMDXComponent"],"mappings":"6wBAUEA,EACEC,IADFD,cAEIE,EAAWC,YAAOC,KAAUC,MAAM,CACtCC,MAAM,GADSH,CAAH,KAKRI,EAAaJ,YAAOD,EAAPC,CAAH,KACQ,SAAAK,GAAC,OAAIA,EAAEC,mBAElBC,EAAe,Q,uMAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,iBAAQ,CACN,GAAM,UADR,UAGA,iEAAgD,0BAAYC,WAAW,KAAvB,mBAAhD,0BACA,YAAC,IAAD,CAAMC,QAAS,GAAIC,UAAW,CAAC,QAAS,UAAWC,UAAW,CAAC,QAAS,UAAWJ,QAAQ,QAC3F,YAAC,IAAKK,IAAN,KACI,YAAC,IAAD,CAAYL,QAAQ,eACf,SAAAM,GAAK,OAAIC,OAAOC,QAAQF,EAAMG,QAAQC,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAE,GAAGE,cAAcD,EAAE,OAAKE,KAAI,gBAAEC,EAAF,KAAOC,EAAP,YAAkB,YAAC,IAAKC,OAAN,CAAaC,MAAO,CAAC,EAAG,EAAG,GAAIC,IAAKJ,GAC1H,YAAC,IAAD,CAAKK,GAAInC,EAAUO,gBAAiBuB,EAAKM,MAAM,SAASC,UAAmB,SAARP,EAAiB,aAAe,OAAQQ,SAAO,EAACvB,QAAQ,OACvH,YAAC,IAAD,CAAQwB,cAAY,EAACxB,QAAQ,UACzB,YAAC,IAAD,CAAQA,QAAQ,UACZ,YAAC,IAAD,CAAMyB,WAAW,OAAOzB,QAAQ,QAAQe,GACxC,YAAC,IAAD,CAAQW,MAAO3C,EAAc4C,OAAQH,cAAY,EAACxB,QAAQ,UACtD,YAAC,IAAD,CAAM4B,UAAU,QAAQC,OAAK,EAAC7B,QAAQ,QAAQgB,gBAStF,iBAAQ,CACN,GAAM,WADR,WAGA,0HACA,YAAC,IAAD,CAAMd,QAAS,GAAIC,UAAW,CAAC,QAAS,UAAWC,UAAW,CAAC,QAAS,UAAWJ,QAAQ,QAC3F,YAAC,IAAKK,IAAN,KACI,YAAC,IAAD,CAAYL,QAAQ,eACf,SAAAM,GAAK,OAAIC,OAAOC,QAAQF,EAAMwB,SAASpB,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAE,GAAGE,cAAcD,EAAE,OAAKE,KAAI,gBAAEC,EAAF,KAAOC,EAAP,YAAkB,YAAC,IAAKC,OAAN,CAAaC,MAAO,CAAC,EAAG,GAAIC,IAAKJ,GACxH,YAAC,IAAD,CAAKK,GAAI9B,EAAYE,gBAAiBwB,EAAOK,MAAM,SAASC,UAAWN,IAAUV,EAAMG,OAAOsB,KAAO,aAAe,OAAQR,SAAO,EAACvB,QAAQ,OACxI,YAAC,IAAD,CAAQwB,cAAY,EAACxB,QAAQ,UACzB,YAAC,IAAD,CAAQA,QAAQ,UACZ,YAAC,IAAD,CAAMyB,WAAW,OAAOzB,QAAQ,QAAQe,GACxC,YAAC,IAAD,CAAQW,MAAO3C,EAAc4C,OAAQH,cAAY,EAACxB,QAAQ,UACtD,YAAC,IAAD,CAAM4B,UAAU,QAAQC,OAAK,EAAC7B,QAAQ,QAAQgB,iB,8LAa1FnB,EAAWmC,gBAAiB","file":"component---docz-theme-colors-mdx-30cbb06e4317f3f0b7a1.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"D:/Web/react-nails/react-nails-docz/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground } from \"docz\";\nimport styled from 'styled-components';\nimport { Row, Grid, ThemeProps, Filler, Column, Types, Text, Box, NailsBox } from \"react-nails\";\nconst {\n  ItemAlignType\n} = Types;\nconst ColorBox = styled(NailsBox).attrs({\n  flex: true\n})`\n    min-height: 8em;\n`;\nconst ColorField = styled(ColorBox)`\n    background-color: ${p => p.backgroundColor};\n`;\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"colors\"\n    }}>{`Colors`}</h1>\n    <p>{`The listed colors can be used to set the `}<inlineCode parentName=\"p\">{`backgroundColor`}</inlineCode>{` property of elements.`}</p>\n    <Grid columns={12} itemSpace={[\"small\", \"medium\"]} lineSpace={[\"small\", \"medium\"]} mdxType=\"Grid\">\n    <Grid.Row>\n        <ThemeProps mdxType=\"ThemeProps\">\n            {theme => Object.entries(theme.colors).sort((a, b) => a[0].localeCompare(b[0])).map(([col, value]) => <Grid.Column width={[6, 3, 2]} key={col}>\n                            <Box as={ColorBox} backgroundColor={col} space=\"medium\" textColor={col === \"text\" ? \"textInvert\" : \"text\"} rounded mdxType=\"Box\">\n                                <Filler stretchChild mdxType=\"Filler\">\n                                    <Column mdxType=\"Column\">\n                                        <Text textWeight=\"bold\" mdxType=\"Text\">{col}</Text>\n                                        <Filler align={ItemAlignType.Bottom} stretchChild mdxType=\"Filler\">\n                                            <Text textAlign=\"right\" block mdxType=\"Text\">{value}</Text>\n                                        </Filler>\n                                    </Column>\n                                </Filler>\n                            </Box>\n                        </Grid.Column>)}\n        </ThemeProps>\n    </Grid.Row>\n    </Grid>\n    <h1 {...{\n      \"id\": \"palette\"\n    }}>{`Palette`}</h1>\n    <p>{`These colors are defined inside the theme and can be used as explicit property inside components.`}</p>\n    <Grid columns={12} itemSpace={[\"small\", \"medium\"]} lineSpace={[\"small\", \"medium\"]} mdxType=\"Grid\">\n    <Grid.Row>\n        <ThemeProps mdxType=\"ThemeProps\">\n            {theme => Object.entries(theme.palette).sort((a, b) => a[0].localeCompare(b[0])).map(([col, value]) => <Grid.Column width={[3, 2]} key={col}>\n                            <Box as={ColorField} backgroundColor={value} space=\"medium\" textColor={value === theme.colors.text ? \"textInvert\" : \"text\"} rounded mdxType=\"Box\">\n                                <Filler stretchChild mdxType=\"Filler\">\n                                    <Column mdxType=\"Column\">\n                                        <Text textWeight=\"bold\" mdxType=\"Text\">{col}</Text>\n                                        <Filler align={ItemAlignType.Bottom} stretchChild mdxType=\"Filler\">\n                                            <Text textAlign=\"right\" block mdxType=\"Text\">{value}</Text>\n                                        </Filler>\n                                    </Column>\n                                </Filler>\n                            </Box>\n                        </Grid.Column>)}\n        </ThemeProps>\n    </Grid.Row>\n    </Grid>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}