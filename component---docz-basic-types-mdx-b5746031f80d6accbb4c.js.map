{"version":3,"sources":["webpack:///../docz/Basic/Types.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","Fragment","Object","entries","Types","sort","a","b","localeCompare","map","name","typeDef","size","entry","value","key","isMDXComponent"],"mappings":"yiBAQO,IAAMA,EAAe,Q,sMAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,iBAAQ,CACN,GAAM,SADR,SAGA,8KACA,YAAC,IAAMC,SAAP,KACCC,OAAOC,QAAQC,KAAOC,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAE,GAAGE,cAAcD,EAAE,OAAKE,KAAI,gBAAEC,EAAF,KAAQC,EAAR,YAAqB,YAAC,IAAMV,SAAP,KAC7E,YAAC,IAAD,CAAYW,KAAK,QAAQZ,QAAQ,cAAcU,GAC/C,yBACI,yBACI,sBACI,8BACA,iCAGR,yBACKR,OAAOC,QAAQQ,GAASN,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAE,GAAGE,cAAcD,EAAE,OAAKE,KAAI,gBAAEI,EAAF,KAASC,EAAT,YAAoB,kBAAIC,IAAKF,GACvF,sBAAKA,GACL,sBAAKC,e,6LAUzCjB,EAAWmB,gBAAiB","file":"component---docz-basic-types-mdx-b5746031f80d6accbb4c.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"E:/Web/react-nails/react-nails-docz/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground } from 'docz';\nimport { Row, Types, HeaderText } from 'react-nails';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"types\"\n    }}>{`Types`}</h1>\n    <p>{`React-nails defines a list of general types which are used as property types. This concept is the main key for consistent and customizable frontends.`}</p>\n    <React.Fragment>\n    {Object.entries(Types).sort((a, b) => a[0].localeCompare(b[0])).map(([name, typeDef]) => <React.Fragment>\n                <HeaderText size=\"large\" mdxType=\"HeaderText\">{name}</HeaderText>\n                <table>\n                    <thead>\n                        <tr>\n                            <th>Enum</th>\n                            <th>Value</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {Object.entries(typeDef).sort((a, b) => a[0].localeCompare(b[0])).map(([entry, value]) => <tr key={entry}>\n                                    <td>{entry}</td>\n                                    <td>{value}</td>\n                                </tr>)}\n                    </tbody>\n                </table>\n            </React.Fragment>)}\n    </React.Fragment>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}